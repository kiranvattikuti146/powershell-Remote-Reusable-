name: Robocopy Task

on:
  workflow_call:
    inputs:
      SourcePath:
        required: true
        type: string
      MachineNames:
        required: true
        type: string
      AdminUserName:
        required: true
        type: string
      AdminPassword:
        required: true
        type: string
      TargetPath:
        required: true
        type: string
      CleanTarget:
        required: false
        type: boolean
      CopyFilesInParallel:
        required: false
        type: boolean

jobs:
  execute-powershell:
    runs-on: self-hosted

    steps:
      - name: Execute Robocopy via PowerShell
        shell: pwsh
        run: |
          try {
              $sourcePath = "${{ inputs.SourcePath }}"
              $machines = "${{ inputs.MachineNames }}"
              $adminUserName = "${{ inputs.AdminUserName }}"
              $adminPassword = "${{ inputs.AdminPassword }}"
              $targetPath = "${{ inputs.TargetPath }}"

              # Convert inputs to boolean values
              $cleanTarget = [bool]::Parse("${{ inputs.CleanTarget }}")
              $copyInParallel = [bool]::Parse("${{ inputs.CopyFilesInParallel }}")

              # Construct Robocopy options
              $robocopyOptions = @("/MIR", "/Z", "/R:3", "/W:5")
              if ($copyInParallel) { $robocopyOptions += "/MT:8" }
              if ($cleanTarget -and -not $robocopyOptions.Contains("/MIR")) { $robocopyOptions += "/PURGE" }

              Write-Host "Admin Username: $adminUserName"
              Write-Host "Admin Password: $adminPassword"
              Write-Host "Running Robocopy with options: $robocopyOptions"

              robocopy $sourcePath $targetPath @robocopyOptions

              # Capture the exit code
              $exitCode = $LASTEXITCODE

              # Handle exit codes
              if ($exitCode -eq 0 -or $exitCode -eq 1) {
                  Write-Host "Robocopy completed successfully with exit code $exitCode."
              } else {
                  Write-Error "Robocopy failed with exit code $exitCode."
                  exit $exitCode
              }
          } catch {
              Write-Error "An error occurred: $_"
              exit 1
          }
