name: VSTest Reusable Workflow

on:
  workflow_call:
    inputs:
      runsOn:
        required: true
        type: string
      dotnet-version:
        required: true
        type: string
      test-assembly:
        required: true
        type: string
      configuration:
        required: true
        type: string
      platform:
        required: false
        type: string
      code-coverage-enabled:
        required: false
        type: boolean
      test-run-title:
        required: false
        type: string
      run-in-parallel:
        required: false
        type: boolean
      diagnosticsEnabled:
        required: false
        type: boolean
      rerunFailedTests:
        required: false
        type: boolean
      rerunType:
        required: false
        type: string
      rerunMaxAttempts:
        required: false
        type: string

jobs:
  run-tests:
    runs-on: ${{ inputs.runsOn }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: ${{ inputs.dotnet-version }}

      - name: Restore dependencies
        run: dotnet restore

      - name: Build project
        run: dotnet build --configuration ${{ inputs.configuration }} --no-restore

      - name: Debug Directory Structure
        shell: pwsh
        run: |
          $workingDirectory = "${{ github.workspace }}"
          Set-Location -Path $workingDirectory
          Write-Host "Listing all files in the working directory:"
          Get-ChildItem -Path $workingDirectory -Recurse | ForEach-Object { Write-Host $_.FullName }

      - name: Locate VSTest Console
        shell: pwsh
        run: |
          # Search for vstest.console.exe dynamically
          $vstestPath = Get-ChildItem -Path "C:\Program Files" -Recurse -Filter "vstest.console.exe" -ErrorAction SilentlyContinue | Select-Object -First 1
          if (-not $vstestPath) {
            Write-Error "vstest.console.exe not found on the system."
            exit 1
          }
          Write-Host "Found vstest.console.exe at: $($vstestPath.FullName)"
          echo "VSTEST_PATH=$($vstestPath.FullName)" >> $GITHUB_ENV

      - name: Run tests with Visual Studio Test Runner
        shell: pwsh
        run: |
          $workingDirectory = "${{ github.workspace }}"
          Set-Location -Path $workingDirectory

          # Adjust test assembly pattern dynamically
          $testAssemblies = Get-ChildItem -Path $workingDirectory -Recurse -File | Where-Object { $_.FullName -like "*${{ inputs.test-assembly }}" } | ForEach-Object { $_.FullName }
          if (-not $testAssemblies) {
            Write-Error "No test assemblies found matching the pattern '*${{ inputs.test-assembly }}'."
            exit 1
          }

          Write-Host "Resolved test assemblies:"
          $testAssemblies | ForEach-Object { Write-Host $_ }

          # Construct VSTest arguments
          $vstestArgs = @()
          if (${{ inputs.code-coverage-enabled }}) { $vstestArgs += '/EnableCodeCoverage' }
          if (${{ inputs.run-in-parallel }}) { $vstestArgs += '/Parallel' }
          if (${{ inputs.diagnosticsEnabled }}) { $vstestArgs += '/Diag:logfile.txt' }
          if (${{ inputs.rerunFailedTests }}) { $vstestArgs += "/Rerun:${{ inputs.rerunType }}" }

          # Run VSTest for each resolved test assembly
          foreach ($testAssembly in $testAssemblies) {
            $command = "${{ env.VSTEST_PATH }} `"$testAssembly`" $($vstestArgs -join ' ')"
            Write-Host "Executing: $command"
            Invoke-Expression $command
          }
