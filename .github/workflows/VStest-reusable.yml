name: VSTest Reusable Workflow

on:
  workflow_call:
    inputs:
      runsOn:
        required: true
        type: string
      dotnet-version:
        required: true
        type: string
      test-assembly:
        required: true
        type: string
      configuration:
        required: true
        type: string
      platform:
        required: false
        type: string
      code-coverage-enabled:
        required: false
        type: boolean
      test-run-title:
        required: false
        type: string
      run-in-parallel:
        required: false
        type: boolean
      testPlan:
        required: false
        type: string
      testSuite:
        required: false
        type: string
      testConfiguration:
        required: false
        type: string
      tcmTestRun:
        required: false
        type: string
      uiTests:
        required: false
        type: boolean
      vsTestVersion:
        required: false
        type: string
      vstestLocation:
        required: false
        type: string
      diagnosticsEnabled:
        required: false
        type: boolean
      rerunFailedTests:
        required: false
        type: boolean
      rerunType:
        required: false
        type: string
      rerunMaxAttempts:
        required: false
        type: string
      dontDistribute:
        required: false
        type: boolean

jobs:
  run-tests:
    runs-on: ${{ inputs.runsOn }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: ${{ inputs.dotnet-version }}

      - name: Restore dependencies
        run: dotnet restore tests/UnitTests/UnitTests.csproj

      - name: Build project
        run: dotnet build tests/UnitTests/UnitTests.csproj --configuration ${{ inputs.configuration }} --no-restore

      - name: Debug Directory Structure
        shell: pwsh
        run: |
          # Debug: List all files in the working directory
          $workingDirectory = "${{ github.workspace }}"
          Set-Location -Path $workingDirectory
          Write-Host "Listing all files in the working directory:"
          Get-ChildItem -Path $workingDirectory -Recurse | ForEach-Object { Write-Host $_.FullName }

      - name: Run tests with Visual Studio Test Runner
        shell: pwsh
        run: |
          # Ensure the correct working directory
          $workingDirectory = "${{ github.workspace }}"
          Set-Location -Path $workingDirectory

          # Resolve test assemblies based on the provided test-assembly input
          $testAssemblies = Get-ChildItem -Path $workingDirectory -Recurse -File | Where-Object {
            $_.FullName -match "${{ inputs.test-assembly }}" -and
            $_.FullName -notmatch "ref" -and
            $_.FullName -notmatch "refint"
          } | ForEach-Object { $_.FullName }

          if (-not $testAssemblies) {
            Write-Error "No test assemblies found matching the pattern '${{ inputs.test-assembly }}'."
            exit 1
          }

          # Debug: List resolved test assemblies
          Write-Host "Resolved test assemblies:"
          $testAssemblies | ForEach-Object { Write-Host $_ }

          # Cast inputs to boolean values
          $codeCoverageEnabled = [bool]${{ inputs.code-coverage-enabled }}
          $runInParallel = [bool]${{ inputs.run-in-parallel }}
          $diagnosticsEnabled = [bool]${{ inputs.diagnosticsEnabled }}
          $rerunFailedTests = [bool]${{ inputs.rerunFailedTests }}

          # Construct VSTest arguments
          $vstestArgs = @()
          if ($codeCoverageEnabled) { $vstestArgs += '/EnableCodeCoverage' }
          if ($runInParallel) { $vstestArgs += '/Parallel' }
          if ($diagnosticsEnabled) { $vstestArgs += '/Diag:logfile.txt' }
          if ($rerunFailedTests) { $vstestArgs += "/Rerun:${{ inputs.rerunType }}" }

          # Ensure vstestLocation is provided
          if (-not "${{ inputs.vstestLocation }}") {
            Write-Error "The vstestLocation input is required but was not provided."
            exit 1
          }

          # Run VSTest for each resolved test assembly
          foreach ($testAssembly in $testAssemblies) {
            $command = "${{ inputs.vstestLocation }} `"$testAssembly`" /Settings:TestSettings.runsettings $($vstestArgs -join ' ')"
            Write-Host "Executing: $command"
            Invoke-Expression $command
          }
